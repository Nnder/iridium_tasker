version: '3.7'

services:
  traefik:
    image: traefik:2.5.2
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api=true"
      - "--providers.docker=true"
      - "--providers.docker.network=${COMPOSE_PROJECT_NAME}_web"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`traefik.${DOMAIN:?lost DOMAIN variable}`)
      - traefik.http.routers.api.service=api@internal
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - postgres

  bot_web:
    build:
      context: ./web
      dockerfile: ./apache/dockerfile
    image: bot_web:dev
    environment:
      - POSTGRE_DB=${POSTGRE_DB:?lost POSTGRE_DB variable}
      - POSTGRE_USER=${POSTGRE_USER:?lost POSTGRE_USER variable}
      - POSTGRE_PASSWORD=${POSTGRE_PASSWORD:?lost POSTGRE_PASSWORD variable}
      - PGDATA=${PGDATA:?lost PGDATA variable}
      - BOT_TOKEN=${BOT_TOKEN:?lost BOT_TOKEN variable}
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.services.bot_web.loadbalancer.server.port=80
      - traefik.http.routers.bot_web.rule=Host(`bot_web.${DOMAIN:?lost DOMAIN variable}`)
    # environment:
      # - MYSQL_HOST=mysql_database
      # - MYSQL_PORT=3306
      # - MYSQL_DB=db
      # - MYSQL_USER=${MYSQL_USER:?lost MYSQL_USER variable}
      # - MYSQL_PASSWORD=${MYSQL_PASSWORD:?lost MYSQL_PASSWORD variable}
    ports:
      - 9090:9090 
    volumes:
      - ./web:/var/www/html
    networks:
      - postgres
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  bot:
    build: 
      context: ./bot
      dockerfile: ./docker/development.dockerfile
    container_name: telegram_bot
    volumes:
      - ./bot:/home/node/app
      - node_bot:/home/node/app/node_modules
    environment:
      - BOT_TOKEN=${BOT_TOKEN:?lost BOT_TOKEN variable}
    networks:
      - postgres
    image: bot:dev
    restart: unless-stopped

  postgresdb:
    container_name: db_testdb
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRE_DB:?lost POSTGRE_DB variable}
      - POSTGRES_USER=${POSTGRE_USER:?lost POSTGRE_USER variable}
      - POSTGRES_PASSWORD=${POSTGRE_PASSWORD:?lost POSTGRE_PASSWORD variable}
      - PGDATA=${PGDATA:?lost PGDATA variable}
    volumes:
       - postgres:/data/postgres
    ports:
      - "25433:5432"
    networks:
      - postgres
    restart: unless-stopped
  
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
       - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
    restart: unless-stopped

networks:
  postgres:
    driver: bridge

volumes:
  node_bot:
  postgres:
  pgadmin:
